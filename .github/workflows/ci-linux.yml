name: 'CI / Linux'

on:
  push:
    branches:
      - development
      - linux
      - 'linux-release-*'
    tags:
      - 'release-*.*.*-linux*'
      - 'release-*.*.*-test*'
      - 'v*.*.*'
  pull_request:
    branches:
      - linux
      - linux-vnext
      - 'linux-release-*'

jobs:
  arm64:
    name: Ubuntu arm64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository || github.repository }}
          ref: ${{ inputs.ref }}
          submodules: recursive
      - name: Package and test application in container
        uses: shiftkey/desktop-ubuntu-arm64-packaging@9be09c4b945873e6509baaf690d457aae08cf901
      - name: Upload output artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-arm64-artifacts
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.sha256
          retention-days: 5
          if-no-files-found: error
  arm:
    name: Ubuntu arm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository || github.repository }}
          ref: ${{ inputs.ref }}
          submodules: recursive
      - name: Package and test application in container
        uses: shiftkey/desktop-ubuntu-arm-packaging@dd75ebc57f69fdb9319ab2b0fe11b253bb1ff2a4
      - name: Upload output artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-arm-artifacts
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.sha256
          retention-days: 5
          if-no-files-found: error
  amd64:
    name: Ubuntu x64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository || github.repository }}
          ref: ${{ inputs.ref }}
          submodules: recursive
      - name: Package and test application in container
        uses: pol-rivero/desktop-ubuntu-amd64-packaging@5100a32fe5240f5e3150b8f0740585835d0cf1e8
      - name: Upload output artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-amd64-artifacts
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.sha256
          retention-days: 5
          if-no-files-found: error

  release_github:
    name: Create GitHub release
    needs: [arm64, arm, amd64]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: './artifacts'

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: './artifacts'

      - name: Get tag name without prefix
        run: |
          RELEASE_TAG=${GITHUB_REF/refs\/tags\//}
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
          if [[ "${RELEASE_TAG}" == release-* ]]; then
            tagNameWithoutPrefix="${RELEASE_TAG:8}"
          else
            tagNameWithoutPrefix="${RELEASE_TAG}"
          fi
          echo "RELEASE_TAG_WITHOUT_PREFIX=${tagNameWithoutPrefix}" >> $GITHUB_ENV
          # Export for downstream jobs
          echo "${tagNameWithoutPrefix}" > release_tag_without_prefix.txt

      # GitHubDesktop-linux-<arch>-<old_version>.<ext> -> GitHubDesktopPlus-<release_tag>-linux-<arch>.<ext>
      # GitHubDesktop-linux-<arch>-<old_version>-beta1.<ext> -> GitHubDesktopPlus-<release_tag>-linux-<arch>.<ext>
      - name: Rename artifacts
        run: |
          for file in $(find ./artifacts -type f -name "GitHubDesktop-linux-*"); do
            new_name=$(echo "$file" | sed -E "s/GitHubDesktop-linux-(.*)-[0-9]+\\.[0-9]+\\.[0-9]+(-beta[0-9]+)?\\.(.*)/GitHubDesktopPlus-${{ env.RELEASE_TAG }}-linux-\\1.\\3/")
            new_name=$(echo $new_name | sed -E "s/linux-amd64/linux-x86_64/")
            new_name=$(echo $new_name | sed -E "s/linux-aarch64/linux-arm64/")
            mv --verbose "$file" "$new_name"
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: GitHub Desktop Plus ${{ env.RELEASE_TAG_WITHOUT_PREFIX }}
          body: |
            Upstream: [GitHub Desktop ${{ env.RELEASE_TAG_WITHOUT_PREFIX }} release notes](https://github.com/desktop/desktop/releases/tag/release-${{ env.RELEASE_TAG_WITHOUT_PREFIX }})
          files: |
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.rpm
          draft: false
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload RELEASE_TAG_WITHOUT_PREFIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: release_tag_without_prefix
          path: release_tag_without_prefix.txt
          retention-days: 1
          if-no-files-found: error

  release_aur:
    name: Publish AUR package
    needs: release_github
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: './artifacts'

      - name: Download RELEASE_TAG_WITHOUT_PREFIX artifact
        uses: actions/download-artifact@v4
        with:
          name: release_tag_without_prefix
          path: './'

      - name: Set RELEASE_TAG_WITHOUT_PREFIX env var
        run: |
          echo "RELEASE_TAG_WITHOUT_PREFIX=$(cat ./release_tag_without_prefix.txt)" >> $GITHUB_ENV

      - name: Rename artifacts
        run: |
          for file in $(find ./artifacts -type f -name "GitHubDesktop-linux-*"); do
            new_name=$(echo "$file" | sed -E "s/GitHubDesktop-linux-(.*)-[0-9]+\\.[0-9]+\\.[0-9]+(-beta[0-9]+)?\\.(.*)/GitHubDesktopPlus-${{ env.RELEASE_TAG_WITHOUT_PREFIX }}-linux-\\1.\\3/")
            new_name=$(echo $new_name | sed -E "s/linux-amd64/linux-x86_64/")
            new_name=$(echo $new_name | sed -E "s/linux-aarch64/linux-arm64/")
            mv --verbose "$file" "$new_name"
          done

      - name: Prepare PKGBUILD
        run: |
          AUR_DIR=./publish/aur
          PKGBUILD_FILE=$AUR_DIR/PKGBUILD
          echo "AUR_DIR=$AUR_DIR" >> $GITHUB_ENV
          echo "PKGBUILD_FILE=$PKGBUILD_FILE" >> $GITHUB_ENV
          if [[ ! -f "$PKGBUILD_FILE" ]]; then
              echo "$PKGBUILD_FILE does not exist. Contents of current directory:"
              ls -la
              exit 1
          fi
          version_without_v=$(echo "${{ env.RELEASE_TAG_WITHOUT_PREFIX }}" | sed -E "s/v(.*)/\\1/")
          sed -i "s/\[\[VERSION_WITHOUT_V\]\]/$version_without_v/" $PKGBUILD_FILE
          desktop_file_sha256=$(sha256sum $AUR_DIR/github-desktop-plus.desktop | awk '{ print $1 }')
          sed -i "s/\[\[DESKTOP_FILE_SHA256\]\]/$desktop_file_sha256/" $PKGBUILD_FILE
          x86_64_sha256=$(sha256sum artifacts/**/*-x86_64.deb | awk '{ print $1 }')
          sed -i "s/\[\[X86_64_SHA256\]\]/$x86_64_sha256/" $PKGBUILD_FILE
          aarch64_sha256=$(sha256sum artifacts/**/*-arm64.deb | awk '{ print $1 }')
          sed -i "s/\[\[AARCH64_SHA256\]\]/$aarch64_sha256/" $PKGBUILD_FILE
          armv7h_sha256=$(sha256sum artifacts/**/*-armhf.deb | awk '{ print $1 }')
          sed -i "s/\[\[ARMV7H_SHA256\]\]/$armv7h_sha256/" $PKGBUILD_FILE

      - name: Upload PKGBUILD
        uses: actions/upload-artifact@v4
        with:
          name: PKGBUILD
          path: ${{ env.PKGBUILD_FILE }}
          retention-days: 5
          if-no-files-found: error

      - name: Publish AUR package
        uses: KSXGitHub/github-actions-deploy-aur@v4.1.1
        with:
          pkgname: github-desktop-plus-bin
          pkgbuild: ${{ env.PKGBUILD_FILE }}
          assets: |
            ${{ env.AUR_DIR }}/.gitignore
            ${{ env.AUR_DIR }}/github-desktop-plus.desktop
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message:
            'Update AUR package to version ${{ env.RELEASE_TAG_WITHOUT_PREFIX }}'
          ssh_keyscan_types: rsa,ecdsa,ed25519

  release_rpm:
    name: Publish RPM package
    needs: release_github
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: './artifacts'

      - name: Install createrepo_c and s3cmd
        run: |
          sudo apt-get update
          sudo apt-get install -y createrepo-c s3cmd

      - name: Import GPG private key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "default-key $(gpg --list-keys --with-colons | grep pub | head -n1 | cut -d: -f5)" >> ~/.gnupg/gpg.conf

      - name: Prepare RPM repository
        run: |
          mkdir dist
          cd dist
          mkdir Packages

          find ../artifacts -type f -name "*.rpm" -exec cp {} Packages/ \;
          createrepo_c --update .

      - name: Configure s3cmd for Cloudflare R2
        run: |
          cat > ~/.s3cfg <<EOF
          [default]
          access_key = ${{ secrets.R2_ACCESS_KEY_ID }}
          secret_key = ${{ secrets.R2_SECRET_ACCESS_KEY }}
          host_base = ${{ secrets.R2_ENDPOINT }}
          host_bucket = ${{ secrets.R2_ENDPOINT }}
          use_https = True
          signature_v2 = False
          EOF

      - name: Sync RPM repo to Cloudflare R2
        working-directory: dist
        run: |
          s3cmd sync --delete-removed ./ s3://${{ secrets.R2_BUCKET_RPM }}/

  release_deb:
    name: Publish DEB package
    needs: release_github
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: './artifacts'

      - name: Install Debian repo tools and s3cmd
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev apt-utils s3cmd

      - name: Import GPG private key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "default-key $(gpg --list-keys --with-colons | grep pub | head -n1 | cut -d: -f5)" >> ~/.gnupg/gpg.conf

      - name: Prepare APT repository
        run: |
          mkdir dist
          cd dist

          # Copy .deb packages into pool
          mkdir -p pool/main
          find ../artifacts -type f -name "*.deb" -exec cp {} pool/main/ \;

          # Normalize package names
          dpkg-name pool/main/*.deb

          # Generate the Packages index for each architecture
          for arch in amd64 arm64 armhf; do
            mkdir -p dists/stable/main/binary-$arch
            dpkg-scanpackages --arch $arch pool/main /dev/null > dists/stable/main/binary-$arch/Packages
            gzip -k dists/stable/main/binary-$arch/Packages
          done

          # Create the Release file
          apt-ftparchive -o APT::FTPArchive::Release::Codename=stable release dists/stable > dists/stable/Release

          # Sign release file
          gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_KEY_PASSPHRASE }}" --clearsign -o dists/stable/InRelease dists/stable/Release
          gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_KEY_PASSPHRASE }}" --detach-sign -o dists/stable/Release.gpg dists/stable/Release

      - name: Configure s3cmd for Cloudflare R2
        run: |
          cat > ~/.s3cfg <<EOF
          [default]
          access_key = ${{ secrets.R2_ACCESS_KEY_ID }}
          secret_key = ${{ secrets.R2_SECRET_ACCESS_KEY }}
          host_base = ${{ secrets.R2_ENDPOINT }}
          host_bucket = ${{ secrets.R2_ENDPOINT }}
          use_https = True
          signature_v2 = False
          EOF

      - name: Sync DEB repo to Cloudflare R2
        working-directory: dist
        run: |
          s3cmd sync --delete-removed ./ s3://${{ secrets.R2_BUCKET_APT }}/
